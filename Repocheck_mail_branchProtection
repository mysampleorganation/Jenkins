import groovy.json.JsonSlurper

println "Hello World of Groovy !"
/* echo "Printing out the JSON payload from groovy script in github: $params.payload" */

echo "Test push 1"
echo "Test push 2"


def jsonSlurper = new JsonSlurper()
def inputText = params.payload

def jsonObject = jsonSlurper.parseText(inputText)
/* println "JSONObject generated out of JsonSlurper : " + jsonObject */

println "Event that triggred this webhook: " + jsonObject.action
println "Repository Name: " + jsonObject.repository.name
println "Repository https clone url: " + jsonObject.repository.clone_url
println "Person's name that generated this event: " + jsonObject.sender.login
println "Person's LDAP-ID that generated this event: " + jsonObject.sender.ldap_dn


----------------------
import groovy.json.JsonSlurper


pipeline {

agent {label "DevServer"}

stages {


    
stage('Display Info sent by Webhook') {
        
steps{
            
script{

def jsonSlurper = new JsonSlurper()
def inputText = params.payload
def jsonRepoObject = jsonSlurper.parseText(inputText)

if (jsonRepoObject.action == "created") {

echo  "EVENT NAME:         " + jsonRepoObject.action
echo  "REPOSITORY NAME:    " + jsonRepoObject.repository.name
echo "REPOSITORY URL:     " + jsonRepoObject.repository.clone_url
echo "CREATOR'S LOGIN:    " + jsonRepoObject.sender.login
echo "CREATOR'S LDAP-ID:  " + jsonRepoObject.sender.ldap_dn

} // end of if repo created block


if (jsonRepoObject.action == "deleted") {

echo "Deleting Repository : " + jsonRepoObject.repository.name
    
} // end of if repo deleted block



} // end of script

} // end of steps

} // end of "Display Info sent by Webhook" stage



stage ('Repo Name Standards check') {

steps {

script {

def jsonSlurper = new JsonSlurper()
def inputText = params.payload
def jsonRepoObject = jsonSlurper.parseText(inputText)
def repo_name=jsonRepoObject.repository.name
def repo_creator=jsonRepoObject.sender.login
def repo_creator_email= "${repo_creator}".replace('-','.')
skipRemainingStages = false
def criteriamet = false
def lob_list=["consumer","edo","payments","commercial","infrastructure","info","strategy","security","architecture","CCAS","iris","hi","devops","capital","markets"]


if (jsonRepoObject.action == "created") {

try {


    for(item in lob_list){
   
        if ("$repo_name".toLowerCase().contains("$item") ){
    
                echo "Repository meet FifthThird standards"
                criteriamet = true
                skipRemainingStages = false
                
        }
        
    }
    
    if ("$criteriamet"=="false"){
                skipRemainingStages = true
                echo "skipRemainingStages = ${skipRemainingStages}"
    /*          
                emailext(
                mimeType: 'text/html', 
                to:"mohan.guntaboina@53.com, ${repo_creator_email}@53.com", 
                subject: "Github Stage Repository: ${repo_name} not meeting naming standards", 
                body: "<p> Hi <b>$repo_creator</b>,</br> </br>The GitHub repository <b> $repo_name</b> that you just created in github stage does not appear to follow naming standards. The repository name must start with a 'valid line of business'. </br></br> Valid lines of businesses are: <b> consumer, edo, payments, commercial, infrastructure, info-security, strategy-architecture, ccas, iris, hi, devops, capital, markets</b>. Please rename your repo in Settings. </br></br> For more on Github standards please read the documentation at <b> https://thebank.info53.com/teams/ES/SharedApps/devops/Source%20Code%20Mgmt%20Linked%20Documents/5-3%20Github%20User%20Standards.pdf.</b> </br></br></br><b> Regards,</br>DevOps Team</b></p>")
        */
        }
        
 currentBuild.result = 'SUCCESS'

} catch(Exception e){
    currentBuild.result = 'FAILURE'
} // end catch


} // end of if repo created block


} // end of script

} // end of steps


} // end of "Repo Name " stage



stage ('Applying branch protections to develop/master') {

when {
           expression {
                   !skipRemainingStages
                }
            }

steps {

script {
def jsonSlurper = new JsonSlurper()
def inputText = params.payload
def jsonRepoObject = jsonSlurper.parseText(inputText)
def repo_type= jsonRepoObject.repository.private
def repo_name=jsonRepoObject.repository.name
def repo_creator=jsonRepoObject.sender.login
def branch=jsonRepoObject.ref
def repo_creator_email= "${repo_creator}".replace('-','.')
echo "$repo_type .....  " 

if (jsonRepoObject.ref_type == "branch" && ( jsonRepoObject.ref.toLowerCase() == "develop" || jsonRepoObject.ref.toLowerCase() == "master" || jsonRepoObject.ref.toLowerCase().contains("release") || jsonRepoObject.ref.toLowerCase() == "development"  )) {

try {
        echo "Apply_Branch_Protection started executing"
        
     build job: 'Apply_Branch_Protection', parameters: [[$class: 'StringParameterValue', name: 'repo_name', value: jsonRepoObject.repository.name], [$class: 'StringParameterValue', name: 'repo_creator', value: jsonRepoObject.sender.login], [$class: 'StringParameterValue', name: 'repo_type', value: "$repo_type"  ], [$class: 'StringParameterValue', name: 'branch', value: jsonRepoObject.ref]]
} catch(Exception e){
    currentBuild.result = 'SUCCESS'
} 
} else {echo "Applying  branch protections not executed "}
} 
} 
}



} // end of stages

} // end of pipeline


--------------------------------------------------------------------------------------------------
----------------------------------------------------------------------
pipeline {

agent {label "DevServer"}

stages {


    
    stage('Applying Production') {
        
        steps{
            
            script{
            
            sh 'curl -H "Content-Type: application/json" -k -X PUT https://sogramihqghub99.53.com/api/v3/repos/Fifth-Third/${repo_name}/branches/${branch}/protection --data \'{ "required_status_checks": { "strict": true, "contexts": []}, "enforce_admins": true, "required_pull_request_reviews": {"dismiss_stale_reviews": true, "require_code_owner_reviews": true }, "restrictions": null }\' -u t27455a:42ef65d62ee8e735d6e108bcc9878e6e27a8c080' 
            
            }}}
            
     stage('Email Notification') {
        
        steps{
            
            script{
            
            def repo_creator_email= "${repo_creator}".replace('-','.')
            if ("${repo_type}"== "false"){
             repo_type= "Private Repository"
            } else {
             repo_type= "Public Repository"
            }
            emailext(
                mimeType: 'text/html', 
                to:"mohan.guntaboina@53.com, ${repo_creator_email}@53.com", 
                subject: "Applying Branch Protection to ${branch} branch", 
                body: "<p>Hi <b>$repo_creator,</b> </br></br> Applied branch protection to your <b>${branch}</b> branch for the <b>${repo_name}</b> Repository  </br></br><b> Regards, </br> DevOps Team</b><p> " )
            
            
            }}}
            
            
            
            }}
